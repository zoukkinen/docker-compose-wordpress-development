version: '3'

services:
   db:
     image: mariadb:latest
     volumes:
       - db_data:/var/lib/mysql
     restart: always
     ports:
      - "32000:3306"
     environment:
       MYSQL_ROOT_PASSWORD: somewordpress
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD: wordpress

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8080:80"
     restart: always
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
     working_dir: /var/www/html
     volumes:
       - ./wp-content:/var/www/html/wp-content:rw
       # add shared volume
       - wp_data:/var/www/html:rw
       - ./docker-instructions:/var/www/html/tmp:rw
       #- ./docker-instructions/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini


   phpmyadmin:
     image: phpmyadmin/phpmyadmin
     links:
       - db:mysql
     ports:
       - "8181:80"
     restart: always
     environment:
       MYSQL_USERNAME: root
       MYSQL_ROOT_PASSWORD: somewordpress
       PMA_PORT: "3306"

   wordpress-cli:
     depends_on:
      - db
      - wordpress
     image: wordpress:cli
     restart: always 
     # This is required to run wordpress-cli with the same
     # user-id as wordpress. This way there are no permission problems
     # when running the cli
     user: xfs
     #  Here we run the wp-cli commands on background
     command: sh /usr/local/bin/apache2-wp-cli.sh
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD: wordpress
     volumes:
      # add shared volume
      - wp_data:/var/www/html:rw
      - ./wp-content:/var/www/html/wp-content:rw
      - ./docker-instructions/apache2-wp-cli.sh:/usr/local/bin/apache2-wp-cli.sh
      - ./docker-instructions:/var/www/html/tmp:rw

volumes:
    # add shared volume
    db_data:
    wp_data:
